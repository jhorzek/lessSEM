% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cv4regularizedModel.R
\name{cv4regularizedSEM}
\alias{cv4regularizedSEM}
\title{cv4regularizedSEM}
\usage{
cv4regularizedSEM(
  regularizedSEM,
  k,
  dataSet = NULL,
  scaleData = FALSE,
  scalingFunction = function(dataSet, scalingArguments) scale(x = dataSet, center =
    scalingArguments$center, scale = scalingArguments$scale),
  scalingArguments = list(center = TRUE, scale = TRUE),
  reweigh = FALSE,
  returnSubsetParameters = FALSE
)
}
\arguments{
\item{regularizedSEM}{model of class regularizedSEM}

\item{k}{the number of cross-validation folds. Alternatively, a matrix with pre-defined subsets can be passed to the function. 
See ?lessSEM::aCV4regularizedSEM for an example}

\item{dataSet}{optional: Pass the full, unscaled data set to the function. 
This is important if the data has to be scaled prior to the analysis. If scaling
is performed on the full sample, this will result in dependencies between the 
subsets created by the cross-validation. To prevent this, pass the full data and use scaleData = TRUE,
the scalingFunction, and the scalingArguments}

\item{scaleData}{if set to TRUE, the subsets will be scaled using the scalingFunction}

\item{scalingFunction}{this function is used to scale the subsets. It MUST take two arguments:
first, the data set as matrix and second the scalingArguments. The latter can be anything you need
for the scaling}

\item{scalingArguments}{the second argument passed to scalingFunction.}

\item{reweigh}{this is used for the adaptive lasso. When the weights are based on the full
sample, this may undermine the cross-validation. Set reweigh = TRUE to create new
weigths for each subset. This will use the default weights (inverse of MLE). Alternatively,
you can pass a matrix with k rows and nParameters columns with weights.}

\item{returnSubsetParameters}{if set to TRUE, the parameter estimates of the individual cross-validation training sets will be returned}
}
\description{
cross-validation for regularized structural equation models
}
\examples{
library(lavaan)
library(lessSEM)
set.seed(123)

dataset <- simulateExampleData()

lavaanSyntax <- "
f =~ l1*y1 + l2*y2 + l3*y3 + l4*y4 + l5*y5 + 
     l6*y6 + l7*y7 + l8*y8 + l9*y9 + l10*y10 + 
     l11*y11 + l12*y12 + l13*y13 + l14*y14 + l15*y15
f ~~ 1*f
"

lavaanModel <- lavaan::sem(lavaanSyntax,
                           data = dataset,
                           meanstructure = TRUE,
                           std.lv = TRUE)

regsem <- lasso(
  lavaanModel = lavaanModel,
  regularized = paste0("l", 6:15),
  lambdas = seq(0,1,.1),
  control = controlIsta()
)

# standard cross-validation
cv <- try(cv4regularizedSEM(regularizedSEM = regsem,
                              k = 5)
)

# IMPORTANT: If your data is scaled prior to the cross-validation, 
# there are dependencies between your train and test set. To avoid this,
# you can use the scale arguments to standardize the training and testing sets
# separately.
# First, set scaleData = TRUE
# Second, provide a scalingFunction. This function MUST take two arguments:
# the data set and the scalingArguments.
# scalingArguments can be used to pass anything you need to the scalingFunction.
# Example:
scalingFunction <-  function(x, scalingArguments) {
  scale(x, 
        center = scalingArguments$center, 
        scale = scalingArguments$scale)
}
scalingArguments = list("scale" = TRUE, 
                        "center" = TRUE)

cv <- cv4regularizedSEM(regularizedSEM = regsem,
                          k = 5,
                          scaleData = TRUE, 
                          scalingFunction = scalingFunction, 
                          scalingArguments = scalingArguments )

# In adaptive lasso regularization, using adaptive lasso weights which 
# are based on the full sample may also result in false cross-validation.
# Here, you can use the reweigh argument to re-compute the weights for each
# train set. Note that these will always be the inverse of the absolute values
# of the maximum likelihood estimates. Alternatively, you can also pass a matrix
# with k rows and nParameter columns with weights

regsem <-  adaptiveLasso(
  lavaanModel = lavaanModel,
  regularized = paste0("l", 6:15),
  lambdas = seq(0,1,.1),
  control = controlIsta()
) 

cv <- cv4regularizedSEM(regularizedSEM = regsem,
                          k = 5, 
                          reweigh = TRUE)
}
