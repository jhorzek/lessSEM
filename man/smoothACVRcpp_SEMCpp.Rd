% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/approximateCrossValidation.R
\name{smoothACVRcpp_SEMCpp}
\alias{smoothACVRcpp_SEMCpp}
\title{smoothACVRcpp_SEMCpp}
\usage{
smoothACVRcpp_SEMCpp(
  SEM,
  k,
  individualPenaltyFunction = NULL,
  individualPenaltyFunctionGradient = NULL,
  individualPenaltyFunctionHessian = NULL,
  raw = FALSE,
  penaltyFunctionArguments = NULL
)
}
\arguments{
\item{SEM}{model of class Rcpp_SEMCpp. Models of this class
can be generated with the SEMFromLavaan-function.}

\item{k}{the number of cross-validation folds. We recommend leave-one-out cross-validation; i.e. set k to the number of persons in the data set}

\item{individualPenaltyFunction}{penalty function which takes the current parameter values as first argument and the penaltyFunctionArguments as second argument and 
returns a single value - the value of the penalty function for a single person. If the true penalty function is non-differentiable (e.g., lasso) a smooth
approximation of this function should be provided.}

\item{individualPenaltyFunctionGradient}{gradients of the penalty function. Function should take the current parameter values as first argument and the penaltyFunctionArguments as second argument and 
return a vector of the same length as parameters. If the true penalty function is non-differentiable (e.g., lasso) a smooth
approximation of this function should be provided.}

\item{individualPenaltyFunctionHessian}{Hessian of the penalty function. Function should take the current parameter values as first argument and the penaltyFunctionArguments as second argument and 
return a matrix with (length as parameters)^2 number of elements. If the true penalty function is non-differentiable (e.g., lasso) a smooth
approximation of this function should be provided.}

\item{raw}{controls if the internal transformations of aCV4SEM should be used.}

\item{penaltyFunctionArguments}{can be anything that the functions individualPenaltyFunction, individualPenaltyFunctionGradient, or individualPenaltyFunctionHessian need. See aCV4SEM::smoothLASSO for an example.}
}
\description{
internal function for approximate cross-validation based on the internal model representation of aCV4SEM. The smooth part refers to the fact
that this function expectes the penalty functions to be smooth. If the true penalty function is non-differentiable (e.g., lasso) a smooth
approximation of this function should be provided. See aCV4SEM::smoothLASSO as an example. Also, the gradients and the Hessian of this 
smooth approximation should be provided.
}
