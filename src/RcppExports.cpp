// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/lessSEM.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// callFitFunction
double callFitFunction(SEXP fitFunctionSEXP, Rcpp::NumericVector parameters, Rcpp::List userSuppliedElements);
RcppExport SEXP _lessSEM_callFitFunction(SEXP fitFunctionSEXPSEXP, SEXP parametersSEXP, SEXP userSuppliedElementsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type fitFunctionSEXP(fitFunctionSEXPSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type userSuppliedElements(userSuppliedElementsSEXP);
    rcpp_result_gen = Rcpp::wrap(callFitFunction(fitFunctionSEXP, parameters, userSuppliedElements));
    return rcpp_result_gen;
END_RCPP
}
// mcpPenalty_C
double mcpPenalty_C(const double par, const double lambda_p, const double theta);
RcppExport SEXP _lessSEM_mcpPenalty_C(SEXP parSEXP, SEXP lambda_pSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type par(parSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_p(lambda_pSEXP);
    Rcpp::traits::input_parameter< const double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(mcpPenalty_C(par, lambda_p, theta));
    return rcpp_result_gen;
END_RCPP
}
// scadPenalty_C
double scadPenalty_C(const double par, const double lambda_p, const double theta);
RcppExport SEXP _lessSEM_scadPenalty_C(SEXP parSEXP, SEXP lambda_pSEXP, SEXP thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type par(parSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda_p(lambda_pSEXP);
    Rcpp::traits::input_parameter< const double >::type theta(thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(scadPenalty_C(par, lambda_p, theta));
    return rcpp_result_gen;
END_RCPP
}
// logicalMatch
Rcpp::NumericVector logicalMatch(const Rcpp::LogicalMatrix X, Rcpp::LogicalVector x);
RcppExport SEXP _lessSEM_logicalMatch(SEXP XSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::LogicalMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(logicalMatch(X, x));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_SEM_cpp();
RcppExport SEXP _rcpp_module_boot_istaCappedL1SEM_cpp();
RcppExport SEXP _rcpp_module_boot_istaCappedL1mgSEM_cpp();
RcppExport SEXP _rcpp_module_boot_bfgsEnetSEM_cpp();
RcppExport SEXP _rcpp_module_boot_bfgsEnetMgSEM_cpp();
RcppExport SEXP _rcpp_module_boot_glmnetEnetSEM_cpp();
RcppExport SEXP _rcpp_module_boot_glmnetEnetMgSEM_cpp();
RcppExport SEXP _rcpp_module_boot_istaEnetSEM_cpp();
RcppExport SEXP _rcpp_module_boot_istaEnetMgSEM_cpp();
RcppExport SEXP _rcpp_module_boot_glmnetEnetGeneralPurpose_cpp();
RcppExport SEXP _rcpp_module_boot_istaEnetGeneralPurpose_cpp();
RcppExport SEXP _rcpp_module_boot_glmnetEnetGeneralPurposeCpp_cpp();
RcppExport SEXP _rcpp_module_boot_istaEnetGeneralPurposeCpp_cpp();
RcppExport SEXP _rcpp_module_boot_glmnetCappedL1SEM_cpp();
RcppExport SEXP _rcpp_module_boot_glmnetCappedL1MgSEM_cpp();
RcppExport SEXP _rcpp_module_boot_glmnetMixedPenaltyGeneralPurpose_cpp();
RcppExport SEXP _rcpp_module_boot_glmnetMixedPenaltyGeneralPurposeCpp_cpp();
RcppExport SEXP _rcpp_module_boot_glmnetLspSEM_cpp();
RcppExport SEXP _rcpp_module_boot_glmnetLspMgSEM_cpp();
RcppExport SEXP _rcpp_module_boot_glmnetMcpSEM_cpp();
RcppExport SEXP _rcpp_module_boot_glmnetMcpMgSEM_cpp();
RcppExport SEXP _rcpp_module_boot_glmnetMixedSEM_cpp();
RcppExport SEXP _rcpp_module_boot_glmnetMixedMgSEM_cpp();
RcppExport SEXP _rcpp_module_boot_glmnetScadSEM_cpp();
RcppExport SEXP _rcpp_module_boot_glmnetScadMgSEM_cpp();
RcppExport SEXP _rcpp_module_boot_istaMixedPenaltyGeneralPurpose_cpp();
RcppExport SEXP _rcpp_module_boot_istaMixedPenaltyGeneralPurposeCpp_cpp();
RcppExport SEXP _rcpp_module_boot_istaLSPSEM_cpp();
RcppExport SEXP _rcpp_module_boot_istaLSPMgSEM_cpp();
RcppExport SEXP _rcpp_module_boot_istaMcpSEM_cpp();
RcppExport SEXP _rcpp_module_boot_istaMcpMgSEM_cpp();
RcppExport SEXP _rcpp_module_boot_istaMixedPenaltySEM_cpp();
RcppExport SEXP _rcpp_module_boot_istaMixedPenaltymgSEM_cpp();
RcppExport SEXP _rcpp_module_boot_istaScadSEM_cpp();
RcppExport SEXP _rcpp_module_boot_istaScadMgSEM_cpp();
RcppExport SEXP _rcpp_module_boot_mgSEM_cpp();

static const R_CallMethodDef CallEntries[] = {
    {"_lessSEM_callFitFunction", (DL_FUNC) &_lessSEM_callFitFunction, 3},
    {"_lessSEM_mcpPenalty_C", (DL_FUNC) &_lessSEM_mcpPenalty_C, 3},
    {"_lessSEM_scadPenalty_C", (DL_FUNC) &_lessSEM_scadPenalty_C, 3},
    {"_lessSEM_logicalMatch", (DL_FUNC) &_lessSEM_logicalMatch, 2},
    {"_rcpp_module_boot_SEM_cpp", (DL_FUNC) &_rcpp_module_boot_SEM_cpp, 0},
    {"_rcpp_module_boot_istaCappedL1SEM_cpp", (DL_FUNC) &_rcpp_module_boot_istaCappedL1SEM_cpp, 0},
    {"_rcpp_module_boot_istaCappedL1mgSEM_cpp", (DL_FUNC) &_rcpp_module_boot_istaCappedL1mgSEM_cpp, 0},
    {"_rcpp_module_boot_bfgsEnetSEM_cpp", (DL_FUNC) &_rcpp_module_boot_bfgsEnetSEM_cpp, 0},
    {"_rcpp_module_boot_bfgsEnetMgSEM_cpp", (DL_FUNC) &_rcpp_module_boot_bfgsEnetMgSEM_cpp, 0},
    {"_rcpp_module_boot_glmnetEnetSEM_cpp", (DL_FUNC) &_rcpp_module_boot_glmnetEnetSEM_cpp, 0},
    {"_rcpp_module_boot_glmnetEnetMgSEM_cpp", (DL_FUNC) &_rcpp_module_boot_glmnetEnetMgSEM_cpp, 0},
    {"_rcpp_module_boot_istaEnetSEM_cpp", (DL_FUNC) &_rcpp_module_boot_istaEnetSEM_cpp, 0},
    {"_rcpp_module_boot_istaEnetMgSEM_cpp", (DL_FUNC) &_rcpp_module_boot_istaEnetMgSEM_cpp, 0},
    {"_rcpp_module_boot_glmnetEnetGeneralPurpose_cpp", (DL_FUNC) &_rcpp_module_boot_glmnetEnetGeneralPurpose_cpp, 0},
    {"_rcpp_module_boot_istaEnetGeneralPurpose_cpp", (DL_FUNC) &_rcpp_module_boot_istaEnetGeneralPurpose_cpp, 0},
    {"_rcpp_module_boot_glmnetEnetGeneralPurposeCpp_cpp", (DL_FUNC) &_rcpp_module_boot_glmnetEnetGeneralPurposeCpp_cpp, 0},
    {"_rcpp_module_boot_istaEnetGeneralPurposeCpp_cpp", (DL_FUNC) &_rcpp_module_boot_istaEnetGeneralPurposeCpp_cpp, 0},
    {"_rcpp_module_boot_glmnetCappedL1SEM_cpp", (DL_FUNC) &_rcpp_module_boot_glmnetCappedL1SEM_cpp, 0},
    {"_rcpp_module_boot_glmnetCappedL1MgSEM_cpp", (DL_FUNC) &_rcpp_module_boot_glmnetCappedL1MgSEM_cpp, 0},
    {"_rcpp_module_boot_glmnetMixedPenaltyGeneralPurpose_cpp", (DL_FUNC) &_rcpp_module_boot_glmnetMixedPenaltyGeneralPurpose_cpp, 0},
    {"_rcpp_module_boot_glmnetMixedPenaltyGeneralPurposeCpp_cpp", (DL_FUNC) &_rcpp_module_boot_glmnetMixedPenaltyGeneralPurposeCpp_cpp, 0},
    {"_rcpp_module_boot_glmnetLspSEM_cpp", (DL_FUNC) &_rcpp_module_boot_glmnetLspSEM_cpp, 0},
    {"_rcpp_module_boot_glmnetLspMgSEM_cpp", (DL_FUNC) &_rcpp_module_boot_glmnetLspMgSEM_cpp, 0},
    {"_rcpp_module_boot_glmnetMcpSEM_cpp", (DL_FUNC) &_rcpp_module_boot_glmnetMcpSEM_cpp, 0},
    {"_rcpp_module_boot_glmnetMcpMgSEM_cpp", (DL_FUNC) &_rcpp_module_boot_glmnetMcpMgSEM_cpp, 0},
    {"_rcpp_module_boot_glmnetMixedSEM_cpp", (DL_FUNC) &_rcpp_module_boot_glmnetMixedSEM_cpp, 0},
    {"_rcpp_module_boot_glmnetMixedMgSEM_cpp", (DL_FUNC) &_rcpp_module_boot_glmnetMixedMgSEM_cpp, 0},
    {"_rcpp_module_boot_glmnetScadSEM_cpp", (DL_FUNC) &_rcpp_module_boot_glmnetScadSEM_cpp, 0},
    {"_rcpp_module_boot_glmnetScadMgSEM_cpp", (DL_FUNC) &_rcpp_module_boot_glmnetScadMgSEM_cpp, 0},
    {"_rcpp_module_boot_istaMixedPenaltyGeneralPurpose_cpp", (DL_FUNC) &_rcpp_module_boot_istaMixedPenaltyGeneralPurpose_cpp, 0},
    {"_rcpp_module_boot_istaMixedPenaltyGeneralPurposeCpp_cpp", (DL_FUNC) &_rcpp_module_boot_istaMixedPenaltyGeneralPurposeCpp_cpp, 0},
    {"_rcpp_module_boot_istaLSPSEM_cpp", (DL_FUNC) &_rcpp_module_boot_istaLSPSEM_cpp, 0},
    {"_rcpp_module_boot_istaLSPMgSEM_cpp", (DL_FUNC) &_rcpp_module_boot_istaLSPMgSEM_cpp, 0},
    {"_rcpp_module_boot_istaMcpSEM_cpp", (DL_FUNC) &_rcpp_module_boot_istaMcpSEM_cpp, 0},
    {"_rcpp_module_boot_istaMcpMgSEM_cpp", (DL_FUNC) &_rcpp_module_boot_istaMcpMgSEM_cpp, 0},
    {"_rcpp_module_boot_istaMixedPenaltySEM_cpp", (DL_FUNC) &_rcpp_module_boot_istaMixedPenaltySEM_cpp, 0},
    {"_rcpp_module_boot_istaMixedPenaltymgSEM_cpp", (DL_FUNC) &_rcpp_module_boot_istaMixedPenaltymgSEM_cpp, 0},
    {"_rcpp_module_boot_istaScadSEM_cpp", (DL_FUNC) &_rcpp_module_boot_istaScadSEM_cpp, 0},
    {"_rcpp_module_boot_istaScadMgSEM_cpp", (DL_FUNC) &_rcpp_module_boot_istaScadMgSEM_cpp, 0},
    {"_rcpp_module_boot_mgSEM_cpp", (DL_FUNC) &_rcpp_module_boot_mgSEM_cpp, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_lessSEM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
